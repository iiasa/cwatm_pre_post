# ------------------------------------------------

######## ##          ##  ####  ######  ##    ##
##       ##          ## ##  ##   ##   ####  ####
##        ##        ##  ##  ##   ##   ## #### ##
##        ##   ##   ## ########  ##  ##   ##   ##
##         ## #### ##  ##    ##  ##  ##        ##
##         ####  #### ##      ## ## ##          ##
##########  ##    ##  ##      ## ## ##          ##

# Community Water Model Version 0.99
# SETTINGS FILE
# ------------------------------------------------

# for Python 3.7 - no changes in the settings file
# Python 3 only reacts on doubling statements
# e.g. Python 2 works (9and takes the last)
# StepEnd = 31/12/2010
# Step End = 10
# Python 3 will not run and will complain about two StepEnds 

[OPTIONS]
#-------------------------------------------------------
# OPTION - to switch on/off
#-------------------------------------------------------

# Data otions
# if temperature is stored in Kelvin instead Celsius
# !!! here in Celcius
TemperatureInKelvin = True
# if lat/lon the area has to be user defined = precalculated
gridSizeUserDefined = True

#-----------------------------------------------
# Evaporation: calculate pot. evaporation (True) or use precalculated pot.evaporation map stacks (False)
calc_evaporation = True

# Method to calculate potential evaporation (default = 1)
# 1: Penman Monteith (is used if PET_modus is missing)
# 2: xxxx
# 3: xxxx
PET_modus = 1

#-----------------------------------------------
# Irrigation and water demand

# if irrigation is included, otherwise paddy and non paddy is put into 'grassland'
includeIrrigation = True
# if water demand from irrigation, industry and domestic is included
includeWaterDemand = True
includeIndusDomesDemand = False
# Water allocation
# if water demand and availability is calculated for region to compare demand vs. avail
usingAllocSegments = False
# limit abstraction to available groundwater (True) include fossil groundwater (False)
limitAbstraction = False

# Environmental Flow
calc_environflow = False

#-----------------------------------------------
# Soil 
# use preferential flow, that bypasses the soil matrix and drains directly to the groundwater (not for irrPaddy)
preferentialFlow = True
# Capillar rise
CapillarRise = True

#-----------------------------------------------
# Routing

# if runoff concentration to the edge of a cell is included
includeRunoffConcentration = False
# Waterbodies like lakes and reservoirs
includeWaterBodies = True
# kinematic wave routing, if False no routing is calculated
includeRouting = True

#-----------------------------------------------
# Inflow from outside of the modelled area
inflow = %inflowflag
waterquality = False

# --- Reporting & Debugging ------------------- ----------------------------------------------
# Reporting options
writeNetcdfStack = True
reportMap = True
reportTss = True
# Checking water balance (for debugging)
calcWaterBalance = False
sumWaterBalance = False


# ---------------------------------------------------

includeCrops = False
moveIrrFallowToNonIrr = False
#evaporation
# The irrigated land classes may have given up its fallow land to the grasslands land class.
# If this is the case, these fallow lands are returned to the irrigated land class briefly to
# allow them to be planted on in the irrigated land class, and then returned to the
# grasslands land class.
leftoverIrrigatedCropIsRainfed = False
#evaporation
use_GeneralCropIrr = True
# The representative vegetation is determined from a specific user-input map, as compared to being
# determined automatically otherwise.

use_GeneralCropnonIrr = True

#-------------------------------------------------------
# DEFINITIONS OF PARAMETERS
#-------------------------------------------------------

#-------------------------------------------------------
[FILE_PATHS]
#-------------------------------------------------------
PathSystem = P:
PathRoot = %root
PathOut = C:/work/output


PathInit = $(PathSystem)/watmodel/CWATM/modelruns/pinzgau_1km/init


PathMaps = $(PathSystem)/watmodel/CWATM/cwatm_input_1km_pinzgau
PathWaterdemand = $(PathMaps)/landsurface/waterDemand
#PathMeteo = $(PathMaps)/meteo
PathMeteo = %meteoData

PathGroundwaterModflow = $(PathMaps)/ModFlow_inputs
PathGroundwaterModflowOutput = C:/work/output2
Excel_settings_file = P:/watmodel/CWATM/modelruns/pinzgau_1km/settings/crops_pinzgau.xlsx


#-------------------------------------------------------
[NETCDF_ATTRIBUTES]
institution = IIASA
title = Pinzgau - Salzach Water Model - Europe 1km - CWatM
metaNetcdfFile = P:/watmodel/CWATM/calibration/multi_calibration/calibration/metaNetcdf.xml

#-------------------------------------------------------
# AREA AND OUTLETS
#-------------------------------------------------------
[MASK_OUTLET]

# Area mask
# A pcraster map, tif or netcdf map e.g.  $(FILE_PATHS:PathRoot)/data/areamaps/area_indus.map
# or a retancle: Number of Cols, Number of rows, cellsize, upper left corner X, upper left corner Y 
# area salzburg 4547500 2751500, Vienna 4800500 2807500 Danube 5850500 2653500
#MaskMap = P:/watmodel/CWATM/calibration/multi_calibration/catchments/G0010/maps/mask.map
#MaskMap = $(FILE_PATHS:PathMaps)/areamaps/Mask_Pinzgau_1km.tif
MaskMap = %SubCatchmentPath/maps/mask.map

#-------------------------------------------------------
# Station data
# either a map e.g. $(FILE_PATHS:PathRoot)/data/areamaps/area3.map
# or a location coordinates (X,Y) e.g. 5.75 52.25 9.25 49.75 )
# Salzach HZB-Nummer: 204297
Gauges =  %gaugeloc
# if .tif file for gauges, this is a flag if the file is global or local
# e.g. Gauges = $(FILE_PATHS:PathRoot)/data/areamaps/gaugesRhine.tif
GaugesLocal = True

#-------------------------------------------------------
[TIME-RELATED_CONSTANTS]
#-------------------------------------------------------

# StepStart has to be a date e.g. 01/06/1990
# SpinUp or StepEnd either date or numbers 
# SpinUp: from this date output is generated (up to this day: warm up)

StepStart = %CalStart
SpinUp = %CalSpin
StepEnd =  %CalEnd

#-------------------------------------------------------
[INITITIAL CONDITIONS]
#-------------------------------------------------------

# for a warm start initial variables a loaded
# e.g for a start on 01/01/2010 load variable from 31/12/2009
load_initial = True
initLoad = $(FILE_PATHS:PathInit)/Pinzgau1_20161231.nc

# saving variables from this run, to initiate a warm start next run
# StepInit = saving date, can be more than one: 10/01/1973 20/01/1973
save_initial = False
initSave = $(FILE_PATHS:PathInit)/Pinzgau1
StepInit = 31/12/2016

#-------------------------------------------------------
# CALIBARTION PARAMETERS
#-------------------------------------------------------
[CALIBRATION]

# These are parameter which are used for calibration
# could be any parameter, but for an easier overview, tehey are collected here
# in the calibration template a placeholder (e.g. %arnoBeta) instead of value

OUT_Dir = %run_rand_id
OUT_TSS_Daily = discharge
OUT_TSS_MonthAvg = discharge


# Snow  SnowMeltCoef = 0.004
SnowMeltCoef = %SnowMelt
# Cropf factor correction
crop_correct =  %crop
#Soil
soildepth_factor = %soildepthF
#Soil preferentialFlowConstant = 4.0, arnoBeta_factor = 1.0
preferentialFlowConstant = %pref
arnoBeta_add = %arnoB

# interflow part of recharge factor = 1.0
factor_interflow = %interF
# groundwater recessionCoeff_factor = 1.0
recessionCoeff_factor = %reces
# runoff concentration factor runoffConc_factor = 1.0
IceMeltCoef  = %runoff
#Routing manningsN = 0.04
manningsN = %CCM
# reservoir  normal storage limit (fraction of total storage, [-]) [0.15 - 0.85] default 0.5
normalStorageLimit = %normalStorageLimit
# lake parameter - factor to alpha: parameter of of channel width and weir coefficient  [0.33 - 3.] dafault 1.
lakeAFactor = %lakeAFactor
# lake wind factor - factor to evaporation from lake [0.8 - 2.] dafault 1.
lakeEvaFactor = %lakeEvaFactor

#-------------------------------------------------------
# TOPOGRAPHY MAPS
#-------------------------------------------------------
[TOPOP]
# local drain direction map (1-9)
Ldd = $(FILE_PATHS:PathMaps)/routing/ldd.map
# Elevation map used for downscaling meteo maps
Elevation = $(FILE_PATHS:PathMaps)/landsurface/topo/demmin.map
# Elevation standard deviation [m], i.e. altitude difference elevation within pixel.
# Used for sub-pixel modelling of snow accumulation and melt
ElevationStD = $(FILE_PATHS:PathMaps)/landsurface/topo/demstd.map

# Area of pixel [m2] (for lat/lon every cell has a different area)
CellArea = $(FILE_PATHS:PathMaps)/landsurface/topo/cellarea.map

#-------------------------------------------------------
# INPUT METEOROLOGICAL TIMESERIES AS MAPS
#-------------------------------------------------------
[METEO]

# if meteo maps have the same scale than all the other maps e.g. 0.5 deg
meteomapssamescale = False
downscale_wordclim_tavg = $(FILE_PATHS:PathMaps)/meteo/worldclim_tavg.nc 
downscale_wordclim_tmin = $(FILE_PATHS:PathMaps)/meteo/worldclim_tmin.nc 
downscale_wordclim_tmax = $(FILE_PATHS:PathMaps)/meteo/worldclim_tmax.nc 
downscale_wordclim_prec = $(FILE_PATHS:PathMaps)/meteo/worldclim_prec.nc 
# if usemeteodownscaling = True (default if not set) meteo maps will be downscaled
# if usemeteodownscaling = False: meteomaps will be use as they come e.g. as 0.5 deg 
usemeteodownscaling = False 
# precipitation [kg m-2 s-1]
PrecipitationMaps = $(FILE_PATHS:PathMeteo)/pr*
# average daily temperature [K]
TavgMaps = $(FILE_PATHS:PathMeteo)/tas_*

# ----------------------------------------
# This is used if calc_evaporation = False

# daily reference evaporation (free water) 
E0Maps = $(FILE_PATHS:PathMeteo)/e0.nc
# daily reference evapotranspiration (crop) 
ETMaps = $(FILE_PATHS:PathMeteo)/et.nc
# this is true, if ET maps have the same resolution as pr maps
ETsamePr = True

# --------------------------------
# from kg m-2s-1 to m : 86.4
#precipitation_coversion = 86.4
# from MM to m : 0.001
#precipitation_coversion = 0.001
precipitation_coversion = 86.4

#evaporation_coversion = 1.00
# from MM to m : 0.001
evaporation_coversion = 0.001

# OUTPUT maps and timeseries
#OUT_Dir = $(FILE_PATHS:PathOut)
#OUT_MAP_Daily = Precipitation

#-------------------------------------------------------
# CALCULATE EVAPORATION - PENMAN - MONTEITH
#-------------------------------------------------------
[EVAPORATION]

# This is used if calc_evaporation = True
# use albedo maps
albedo = False
albedoMaps = $(FILE_PATHS:PathMaps)/landsurface/albedo/albedo.nc 

# if not albedo maps use fixed albedo
# Albedo of bare soil surface (Supit et. al.)
AlbedoSoil = 0.15
# Albedo of water surface (Supit et. al.)
AlbedoWater = 0.05
# Albedo of vegetation canopy (FAO,1998)
AlbedoCanopy = 0.23

# use specific humidity (TRUE) QAir,  or relative humidity (FALSE) - rhs
useHuss = False

# map stacks Temperature [K}]
TminMaps = $(FILE_PATHS:PathMeteo)/tasmin*
TmaxMaps = $(FILE_PATHS:PathMeteo)/tasmax*
# Instantaneous surface pressure[Pa]
PSurfMaps = $(FILE_PATHS:PathMeteo)/ps*
# 2 m istantaneous specific humidity[kg /kg] (QAir) or relative humidity [pct] (rhs)
RhsMaps = $(FILE_PATHS:PathMeteo)/hurs*
# wind speed maps at 10m [m/s]
WindMaps = $(FILE_PATHS:PathMeteo)/sfcWind*
# radiation surface downwelling shortwave maps  [W/m2]
RSDSMaps = $(FILE_PATHS:PathMeteo)/rsds*
# radiation surface downwelling longwave maps [W/m2] [W/m2]
RSDLMaps = $(FILE_PATHS:PathMeteo)/rlds*

# OUTPUT maps and timeseries
#OUT_Dir = $(FILE_PATHS:PathOut)
#OUT_MAP_Daily = ETRef, EWRef, Precipitation

#-------------------------------------------------------
[SNOW]
#-------------------------------------------------------

# Number of vertical Snow layers
NumberSnowLayers = 10
# up to which layer the ice melt is calculated with the middle temperature
GlacierTransportZone = 4

# Temperature lapse rate with altitude [deg C / m]
TemperatureLapseRate = 0.0065 
# Multiplier applied to precipitation that falls as snow
SnowFactor = 1.0
# Range [m C-1 d-1] of the seasonal variation, SnowMeltCoef is the average value
SnowSeasonAdj = 0.001
# Average temperature at which snow melts
TempMelt =1.0
# Average temperature below which precipitation is snow
TempSnow = 1.0
# Snow melt coefficient: default: 4.0 
# SRM: 0.0045 m/C/day ( = 4.50 mm/C/day), Kwadijk: 18 mm/C/month (= 0.59 mm/C/day)  
# See also Martinec et al., 1998.

# use in CALIBRATION -> copied to CALIBRATION
#SnowMeltCoef = 0.004
#IceMeltCoef  = 0.007

#--------------------------------------------------------------
# INITIAL CONDITIONS - Initial snow depth in snow zone 1-7 [mm]  - SnowCoverIni

[FROST]
# Snow water equivalent, (based on snow density of 450 kg/m3) (e.g. Tarboton and Luce, 1996)
SnowWaterEquivalent = 0.45
# Daily decay coefficient, (Handbook of Hydrology, p. 7.28)
Afrost = 0.97
# Snow depth reduction coefficient, [cm-1], (HH, p. 7.28)
Kfrost = 0.57
# Degree Days Frost Threshold (stops infiltration, percolation and capillary rise)
# Molnau and Bissel found a value 56-85 for NW USA.
FrostIndexThreshold = 56

#--------------------------------------------------------------
# INITIAL CONDITIONS: FrostIndexIni

[VEGETATION]
cropgroupnumber = $(FILE_PATHS:PathMaps)/soil/cropgrp_1km.nc
#cropgroupnumber = 2.0
# soil water depletion fraction, Van Diepen et al., 1988: WOFOST 6.0, p.86, Doorenbos et. al 1978

#-------------------------------------------------------
[SOIL]
#-------------------------------------------------------

PathTopo = $(FILE_PATHS:PathMaps)/landsurface/topo
PathSoil1 =  $(FILE_PATHS:PathMaps)/soil

# Topography mapsNetcdf/maps
# tangent slope
tanslope = $(PathTopo)/tanslope.map

# maps of relative elevation above flood plains
relativeElevation = $(PathTopo)/dzRel_Europe_1km.nc

# Soil hydraulic properties

# soil (Rosetta pedotransfer function)
KSat1 = $(PathSoil1)/ksat1_1km.map
KSat2 = $(PathSoil1)/ksat2_1km.map
KSat3 = $(PathSoil1)/ksat3_1km.map
# Alpha: an Genuchten’s shape parameter
alpha1 = $(PathSoil1)/alpha1_1km.map
alpha2 = $(PathSoil1)/alpha2_1km.map
alpha3 = $(PathSoil1)/alpha3_1km.map
#Lambda: an Genuchten’s shape parameter = n-1-> n = lamda+1, m = 1 - (1/n)
lambda1 = $(PathSoil1)/lambda1_1km.map
lambda2 = $(PathSoil1)/lambda2_1km.map
lambda3 = $(PathSoil1)/lambda3_1km.map
# thetas  is the volumetric water content θ saturated 
thetas1 = $(PathSoil1)/thetas1_1km.map
thetas2 = $(PathSoil1)/thetas2_1km.map
thetas3 = $(PathSoil1)/thetas3_1km.map
# thetar is the volumetric water content θ residual 
thetar1 = $(PathSoil1)/thetar1_1km.map
thetar2 = $(PathSoil1)/thetar2_1km.map
thetar3 = $(PathSoil1)/thetar3_1km.map

percolationImp = $(PathSoil1)/percolationImp_1km.map

maxGWCapRise    = 5.0

minCropKC        = 0.2
minTopWaterLayer = 0.0

# Soil depth
StorDepth1 = $(PathSoil1)/soildepth1_1km.map
StorDepth2 = $(PathSoil1)/soildepth2_1km.map

# preferential flow (between 1.0 and 8.0)
# used in CALIBRATION -> copied to CALIBRATION
#preferentialFlowConstant = 4.0

#-------------------------------------------------------
[LANDCOVER]
PathLandcover = $(FILE_PATHS:PathMaps)/landsurface

coverTypes = forest, grassland, irrPaddy, irrNonPaddy, sealed, water
coverTypesShort = f, g, i, n, s, w
#fractionLandcover = $(PathLandcover)/fractionLandcover_Europe.nc
fractionLandcover = $(PathLandcover)/fractionLandcover_Invekos_Corine_realirri.nc

# Landcover can vary from year to year
dynamicLandcover = False
# if landcover cannot vary, which year should be taken as fixed year
fixLandcoverYear = 2020


corn_maize_Irr = $(FILE_PATHS:PathMaps)/landcover/crops/corn_maize_105_irrigated.tif
rest_irrigation_Irr = $(FILE_PATHS:PathMaps)/landcover/crops/rest_irrigation.tif

corn_maize_nonIrr = $(FILE_PATHS:PathMaps)/landcover/crops/noIrr.tif

silo_maize_nonIrr = $(FILE_PATHS:PathMaps)/landcover/crops/silo_maize_109.tif
grass1_nonIrr = $(FILE_PATHS:PathMaps)/landcover/crops/grass1.tif
grass2_nonIrr = $(FILE_PATHS:PathMaps)/landcover/crops/grass2.tif
rest_irrigation_nonIrr = $(FILE_PATHS:PathMaps)/landcover/crops/noIrr.tif

silo_maize_Irr = $(FILE_PATHS:PathMaps)/landcover/crops/noIrr.tif
grass1_Irr = $(FILE_PATHS:PathMaps)/landcover/crops/noIrr.tif
grass2_Irr = $(FILE_PATHS:PathMaps)/landcover/crops/noIrr.tif




#-------------------------------------------------------

[__forest]
PathForest = $(FILE_PATHS:PathMaps)/landcover/forest
PathSoil1 =  $(FILE_PATHS:PathMaps)/soil

# Parameters for the Arno's scheme 
# arnoBeta is defined by orographic,+ land cover add + calibration add, the soil water capacity distribution is based on this 
# range [0.01 - 1.2]
forest_arnoBeta = 0.2

#forest_soil
forest_KSat1 = $(PathSoil1)/ksat1_1km.map
forest_KSat2 = $(PathSoil1)/ksat2_1km.map
forest_KSat3 = $(PathSoil1)/ksat3_1km.map
forest_alpha1 = $(PathSoil1)/alpha1_1km.map
forest_alpha2 = $(PathSoil1)/alpha2_1km.map
forest_alpha3 = $(PathSoil1)/alpha3_1km.map
forest_lambda1 = $(PathSoil1)/lambda1_1km.map
forest_lambda2 = $(PathSoil1)/lambda2_1km.map
forest_lambda3 = $(PathSoil1)/lambda3_1km.map
forest_thetas1 = $(PathSoil1)/thetas1_1km.map
forest_thetas2 = $(PathSoil1)/thetas2_1km.map
forest_thetas3 = $(PathSoil1)/thetas3_1km.map
forest_thetar1 = $(PathSoil1)/thetar1_1km.map
forest_thetar2 = $(PathSoil1)/thetar2_1km.map
forest_thetar3 = $(PathSoil1)/thetar3_1km.map

# other paramater values
forest_minInterceptCap  = 0.001
forest_cropDeplFactor   = 0.0
forest_rootFraction1 = $(PathForest)/rootFraction1.map
forest_maxRootDepth  = $(PathForest)/maxRootDepth.map
forest_cropCoefficientNC = $(PathForest)/cropCoefficientForest_10days.nc
forest_interceptCapNC    = $(PathForest)/interceptCapForest_10days.nc


[__grassland]
PathGrassland = $(FILE_PATHS:PathMaps)/landcover/grassland

# Parameters for the Arno's scheme: 
grassland_arnoBeta = 0.0
# arnoBeta is defined by orographic,+ land cover add + calibration add, the soil water capacity distribution is based on this
# range [0.01 - 1.2]

# other paramater values
grassland_minInterceptCap  = 0.001
grassland_cropDeplFactor   = 0.0
grassland_rootFraction1 = $(PathGrassland)/rootFraction1.map
grassland_maxRootDepth  = $(PathGrassland)/maxRootDepth.map
grassland_cropCoefficientNC = $(PathGrassland)/cropCoefficientGrassland_10days.nc
grassland_interceptCapNC    = $(PathGrassland)/interceptCapGrassland_10days.nc

[__irrPaddy]
PathIrrPaddy = $(FILE_PATHS:PathMaps)/landcover/irrPaddy

# Parameters for the Arno's scheme:
irrPaddy_arnoBeta = 0.2
# arnoBeta is defined by orographic,+ land cover add + calibration add, the soil water capacity distribution is based on this
# range [0.01 - 1.2]

# other paramater values
irrPaddy_minInterceptCap  = 0.001
irrPaddy_cropDeplFactor   = 0.0
irrPaddy_rootFraction1 = $(PathIrrPaddy)/rootFraction1.map
irrPaddy_maxRootDepth  = $(PathIrrPaddy)/maxRootDepth.map
irrPaddy_cropCoefficientNC = $(PathIrrPaddy)/cropCoefficientirrPaddy_10days.nc
# maximum flooding depth for paddy
irrPaddy_maxtopwater = 0.05


[__irrNonPaddy]
PathIrrNonPaddy = $(FILE_PATHS:PathMaps)/landcover/irrNonPaddy

# Parameters for the Arno's scheme:
irrNonPaddy_arnoBeta = 0.2
# arnoBeta is defined by orographic,+ land cover add + calibration add, the soil water capacity distribution is based on this
# range [0.01 - 1.2]

# other paramater values
irrNonPaddy_minInterceptCap  = 0.001
irrNonPaddy_cropDeplFactor   = 0.0
irrNonPaddy_fracVegCover  = $(PathIrrNonPaddy)/fracVegCover.map
irrNonPaddy_rootFraction1 = $(PathIrrNonPaddy)/rootFraction1.map
irrNonPaddy_maxRootDepth  = $(PathIrrNonPaddy)/maxRootDepth.map
irrNonPaddy_cropCoefficientNC = $(PathIrrNonPaddy)/cropCoefficientirrNonPaddy_10days.nc

[__sealed]
PathSealed = $(FILE_PATHS:PathMaps)/landcover/sealed
sealed_minInterceptCap  = 0.001


[__open_water]
PathWater = $(FILE_PATHS:PathMaps)/landcover/water
water_minInterceptCap  = 0.0

#-------------------------------------------------------
[GROUNDWATER]
#-------------------------------------------------------

PathGroundwater = $(FILE_PATHS:PathMaps)/groundwater

recessionCoeff = $(PathGroundwater)/k_v20_1km.nc
# baseflow = recessionCoeff * storage groundwater
specificYield = $(PathGroundwater)/Europe_porosity_1km_GLHYMPS1.tif
kSatAquifer = $(PathGroundwater)/k_v20_1km.nc
# both not used at the moment in groundwater module, but already loaded

#--------------------------------------------------------------
# INITIAL CONDITIONS: storGroundwater

#-------------------------------------------------------
[GROUNDWATER_MODFLOW]
#-------------------------------------------------------

# Groundwater calculation with Modflow
modflow_coupling = False

#Executable Modflow file
#path_mf6dll = C:\Users\guillaumot\Documents\CWatM_ModFlow6_Jens\Preprocess\ModFlow_inputs_Burgenland\modflow_run
path_mf6dll = P:/watmodel/CWATM/cwatm_input_1km_burgenland/CWATM_160421_lucaModflow/mf6

# Path of Modflow input and output
PathGroundwaterModflowOutput = $(FILE_PATHS:PathOut)/modflow_output
PathGroundwaterModflowClimate = $(FILE_PATHS:PathMeteo)/groundwater_avg
PathGroundwaterModflowInput = $(FILE_PATHS:PathGroundwaterModflow)/$(Modflow_resolution)m

# check CWatM-ModFlow error
writeModflowError = False

##  --- Steady state begin -----------------------
# soil humidity should not be high when starting to avoid to much pumping demand at the begining (between 0 and 1, 0.75 seems nice)
start_soil_humid = 0.75
# load an initial water table (in meter)
load_init_water_table = False
# if False, initial_water_table_depth (in m) is used on all the grid
initial_water_table_depth = 2
# if True, init_water_table is the initial water table file (2D numpy format (row, col))
init_water_table = C:/Users/guillaumot/Documents/CWatM_Burgenland_1km/CWatM-ModFlow6/output_demandV4/water_table_map_previous.npy
# these parameters were used for the previous ModFlow version
# steady state run (True) or transient run (False)
modflow_steadystate = False
# load a previous steady state to continue (default = False)
load_steady_previous = False
# Length of the steady part (before the first day we run the model in pseudo steady state to reduce the length of initializing)
Ndays_steady = 500

# Climate steady state - neeed the average of a period
ModflowPrecipitationMaps = $(PathGroundwaterModflowClimate)/pr_avg.nc
ModflowTavgMaps = $(PathGroundwaterModflowClimate)/tas_avg.nc
ModflowE0Maps = $(PathGroundwaterModflowClimate)/ew_avg.nc
ModflowETMaps = $(PathGroundwaterModflowClimate)/et_avg.nc
# Steady state End ---------------

# Defining the upper limit of the groundwater layer
use_soildepth_as_GWtop = False
correct_soildepth_underlakes = True
depth_underlakes = 1.5

# Pumping file (a 3D numpy array where 1st dim is time, then, 1st col = ModFlow row index, 2nd col = ModFlow col index, 3rd col = pumping rates < 0 !!!! in m3/day)
Groundwater_pumping = True
# if ModFlow cells under the CWatM cell are less saturated than 1-water_table_limit_for_pumping, we prevent pumping
water_table_limit_for_pumping = 0.85
Pumping_input_file = $(PathGroundwaterModflowInput)/pumping_input_file_unique_Sarati_1591.npy
#Pumping_input_dates = $(PathGroundwaterModflowInput)/Pumping_input_dates.npy

# if transient run, this is the name of the initial groundwater level
modflow_steadyInit = $(PathGroundwaterModflowOutput)/Nira_steady_April9_3.hds

# Prefix of the modflow files
nameModflowModel = Burgenland_100m
#ModFlow model's resolution [meter]
Modflow_resolution = 100

# timestep of every Modflow execution
modflow_timestep = 7

load_modflow_from_disk = False

# Number of layers
nlay = 1.0

# Data for specified resolution
cwatm_modflow_indices = $(PathGroundwaterModflowInput)/indices
modflow_basin = $(PathGroundwaterModflowInput)/modflow_basin.tif
topo_modflow = $(PathGroundwaterModflowInput)/elevation_modflow.tif
chanRatio = $(PathGroundwaterModflowInput)/modlfow_river_percentage.tif

# We assume a confined aquifer, the unique parameters are transmissivity, porosity and thickness
# Processing thickness map for ModFlow-Flopy format #
# Thickness (default = 400) otherwise use maps from Gleeson et al.
thickness = 100.0
# Processing porosity map for ModFlow-Flopy format (default = 0.1)
#poro = $(PathGroundwaterModflowInput)/Poro.txt from 0.1
poro = 0.05
#Processing permeability map for ModFlow-Flopy format (default = 1.0E-5 (from 0.25)) in m/s
#permeability = $(PathGroundwaterModflowInput)/Permea.txt --- m/day?
permeability = 2e-05

# leakage under lake and rivers in m/day
leakageriver_permea = 0.001
leakagelake_permea = 0.001


#-------------------------------------------------------
[WATERDEMAND]
#-------------------------------------------------------

# For water demand vs. availability: areas have to be aggregated
# Allocation map
allocSegments = $(FILE_PATHS:PathWaterdemand)/catchx.nc


# Demand in m/day [True] (default) or as mio m3 per year or month [False]
demand_unit = False

# Demand data monthly or yearly, as  m day-1 or mio m3 per month
domesticWaterDemandFile = $(FILE_PATHS:PathWaterdemand)/historical_dom_month_millionm3_5min_1961_2010.nc
# time = True for monthly, False for yearly
domesticTimeMonthly = True
# name of the variable Withrawal = Gross, consumption = Netto
domesticWithdrawalvarname = domWW
domesticConsuptionvarname = domCon

industryWaterDemandFile = $(FILE_PATHS:PathWaterdemand)/historical_ind_year_millionm3_5min_1961_2010.nc
industryTimeMonthly = False
industryWithdrawalvarname = indWW
industryConsuptionvarname = indCon

uselivestock = True
livestockWaterDemandFile = $(FILE_PATHS:PathWaterdemand)/historical_liv_month_millionm3_5min_1961_2010.nc
#livestockWaterDemandFile = $(PathWaterdemand)/livestockWaterDemand.nc
livestockTimeMonthly = True  
livestockvarname = livestockConsumption

# using environmental flow (EF) (per month) as input value
# EF will be treated as one part of overall water demand
use_environflow = False
EnvironmentalFlowFile = $(FILE_PATHS:PathOut)/MQ90_12month.nc

#irrNonPaddy_efficiency = $(FILE_PATHS:PathMaps)/landsurface/waterDemand/efficiency.nc
#irrPaddy_efficiency = $(FILE_PATHS:PathMaps)/landsurface/waterDemand/efficiency.nc
irrNonPaddy_efficiency = 0.8
irrPaddy_efficiency = 0.8
irrigation_returnfraction = 0.5

# ------------------------------------------------------------------
# Estimate of fractions of groundwater and surface water abstractions
# Either a fixed fraction for surface water abstration
# based on fraction of average baseflow and upstream average discharge 
# if swAbstractionFrac < 0: fraction is taken from baseflow / discharge 
# if swAbstractionFrac > 0 this value is taken as a fixed value 
swAbstractionFrac = 0.8

averageDischarge = $(FILE_PATHS:PathOut)/discharge_totalavg.nc
# in [m3/s]
averageBaseflow  = $(FILE_PATHS:PathOut)/baseflow_totalavg.nc
# in [m]
baseflowInM = True
# if baseflow is in [m] instead of [m3/s] it will be converted [TRUE]. If [False] it will be not converted
# -------------------------
# Water Allocation
# Buffer around lakes and reservoirs - water is taken not only from water cells but from
# a rectangular (e.g. 1,3 or 5 please odd numbers) around a waterbody cell
buffer_waterbodies = 3
# Water is taken from surface and groundwater from neighbioring cells, if water is insufficient
# how many cells form a allocation area (e.g. 1,2,3...)
#allocation_area = 10
# Farmers do not irrigated to field capacity but to a fraction of it
alphaDepletion = 0.7

# ------------------------------------------------------------------

#-------------------------------------------------------
# RUNOFF CONCENTRATION
#-------------------------------------------------------
[RUNOFF_CONCENTRATION]

# using triagular weigthning method
# the bigger the factor, more lag time
runoffConc_factor = 1.0

forest_runoff_peaktime = 1.0
grassland_runoff_peaktime = 0.5
irrPaddy_runoff_peaktime = 0.5
irrNonPaddy_runoff_peaktime = 0.5
sealed_runoff_peaktime = 0.15 
water_runoff_peaktime = 0.01

interflow_runoff_peaktime =1.0
baseflow_runoff_peaktime = 2.0

# initial conditions:
# here only 1 layer is shown, but there are up to 10: runoff_concIni


#-------------------------------------------------------
# ROUTING MAPS and PARAMETERSD
#-------------------------------------------------------
[ROUTING]

PathRouting = $(FILE_PATHS:PathMaps)/routing

# Number of substep per day
# should be 10 for 0.5 deg but 24 for 0.1 deg

NoRoutingSteps = 24
#kinematic wave parameter: 0.6 is for broad sheet flow
chanBeta = 0.6

# Channel gradient (fraction, dy/dx)
chanGrad = $(PathRouting)/kinematic/changrad.nc
# Minimum channel gradient (for kin. wave: slope cannot be 0)
chanGradMin = 0.0001

#Channel Manning's n
chanMan = $(PathRouting)/kinematic/chanman.nc
#Channel length [meters]
chanLength = $(PathRouting)/kinematic/chanleng.nc
#Channel bottom width [meters]
chanWidth = $(PathRouting)/kinematic/chanbw.nc
#Bankfull channel depth [meters]
chanDepth = $(PathRouting)/kinematic/chanbnkf.nc

# initial conditions: channelStorageIni, riverbedExchangeIni, dischargeIni  

#-------------------------------------------------------
# LAKES AND RESERVOIRS
#-------------------------------------------------------
[LAKES_RESERVOIRS]

PathLakesRes = $(FILE_PATHS:PathMaps)/routing/lakereservoirs

# Use reservoirs and lakes (otherwise use only lakes Lake ID=1 and 3 => natural conditions)
useResAndLakes = True
# Reservoirs do have a year of implementation
dynamicLakesRes = True
# if Reservoirs does not have a year of implemtation, which year should be taken as fixed year
fixLakesResYear = 1990


#----------------------------
#Big lakes and Reservoirs

# ID of every lake, reservoir from HydroLakes database
waterBodyID = $(PathLakesRes)/lakeresID.nc
# 1 for lake, 2 for reservoir, 3 for lake and reservoir
waterBodyTyp = $(PathLakesRes)/lakeresType.nc
# Avergae discharge from HydroLakes Database
waterBodyDis = $(PathLakesRes)/lakeresDis.nc

# Lakes surface area from HydroLakes Database 
waterBodyArea = $(PathLakesRes)/lakeresArea.nc
# a factor to scale the outlet of a lake
#lakeAFactor = 1.0  -> calibration

#----------------------------
# Small lakes and reservoirs

useSmallLakes = False

smallLakesRes = $(PathLakesRes)/smallLakesRes.nc
smallwaterBodyDis = $(PathLakesRes)/smallLakesResDis.nc

# averageRunoff in [m] (if not given smallwaterBodyDis is taken instead)
#averageRunoff  = $(FILE_PATHS:PathOut)/runoff_totalavg_cali.nc

# initial conditions: lakeInflowIni, lakeStorageIni, outLakeIni, lakeOutflowIni, reservoirStorageIni 

#------------------
# Reservoirs
# reservoir volume from HydroLakes database
waterBodyVolRes = $(PathLakesRes)/lakeresVolRes.nc
# reservoir starting year from HydroLakes database 
waterBodyYear = $(PathLakesRes)/lakeresYear.nc

#  Conservative, normal and flood storage limit (fraction of total storage, [-])
conservativeStorageLimit = 0.1
#normalStorageLimit = 0.5   # --> put into calibration
floodStorageLimit = 0.9
# adjusting the balance between normal and flood storage
# [0 ..1]  0: NormalstorageLimit      1: (= closer to flood) results in keeping the normal qoutflow longer constant
adjust_Normal_Flood = 0.5

# Minimum, Normal and Non-damaging reservoir outflow  (fraction of average discharge, [-])
MinOutflowQ = 0.2
NormalOutflowQ = 1.0
NonDamagingOutflowQ = 4.0

#-------------------------------------------------------
[INFLOW]
#-------------------------------------------------------

# if option inflow = true
# the inflow from outside is added at inflowpoints
In_Dir = %inflowDir

# nominal map with locations of (measured)inflow hydrographs [cu m / s]
InflowPoints = %inflowpoints
InLocal = True

# if InflowPoints is a map, this flag is to identify if it is global (False) or local (True)
# observed or simulated input hydrographs as time series [cu m / s]
# Note: that identifiers in time series have to correspond to InflowPoints
# can be several timeseries in one file or different files e.g. main.tss mosel.tss
#QInTS = main1.tss mosel1.tss
QInTS = %inflowtss



#-------------------------------------------------------
[ENVIRONMENTALFLOW]
#-------------------------------------------------------

# Either calculate without run with predone discharge (set calc_ef_after = False)
calc_ef_after = True
# Or calculate after run (set calc_ef_after = False) and defining the file to be used
EFDis = $(FILE_PATHS:PathOut)/discharge_rhine.nc
# if predone discharge, do the maps need to be cut to fit to the mask?
cut_ef_map = False


# MAF: Mean, Q90: percentile 90, MMF: monthly average, MQ90: monthly Q90 9averagwed over al Jan, Feb..
# EF_VMF: Environmental flow - variable monthly flow, EF_VMF_LIH - EF- variable monthly flow, high intermediate, low class
OUT_Dir = $(FILE_PATHS:PathOut)
#OUT_MAP_Once = MAF, Q90
#OUT_MAP_12month = MMF, MQ90, EF_VMF, EF_VMF_LIH
#OUT_MAP_12month = MQ90, EF_VMF



#+++++++++++++++++++++++++++++++++++++++++++++++++++++++
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++


[OUTPUT]

# OUTPUT maps and timeseries
OUT_Dir = $(FILE_PATHS:PathOut)

